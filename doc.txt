/*

const handleBookedCancel = async () => {
    try {
      // Room must already be booked (availability === false) to cancel
      if (availability) {
        Swal.fire({
          icon: "warning",
          title: "Room Not Booked",
          text: "This room is already available, nothing to cancel!",
        });
        return;
      }

      await axios.patch(`http://localhost:5000/rooms/${room._id}`, {
        availability: true,
        bookedDate: null, // reset booked date
        bookedBy: null,
        email: null,
        // availability: false,
        // bookedDate: selectedDate,
      });

      // update local state
      setLocalRoom((prev) => ({
        ...prev,
        availability: true,
        bookedDate: null,
      }));

      setIsModalOpen(false);
      Swal.fire({
        icon: "success",
        title: "Booking Cancelled",
        text: `${name} booking has been cancelled successfully!`,
        timer: 2000,
        showConfirmButton: false,
      });
    } catch (error) {
      console.error("Cancel booking failed:", error);
      Swal.fire({
        icon: "error",
        title: "Cancel Failed",
        text: "There was an issue cancelling the booking. Please try again later.",
      });
    }
  };

*/